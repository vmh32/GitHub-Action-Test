name: Build and Package

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  detect-and-build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Detect Changed Packages
      id: filter
      uses: dorny/paths-filter@v3
      with:
        filters: |
          "A:LibraryA/LibraryA.csproj:B+C":
            - 'LibraryA/**'
          "B:LibraryB/LibraryB.csproj:C":
            - 'LibraryB/**'
          "C:LibraryC/LibraryC.csproj:":
            - 'LibraryC/**'
          "D:LibraryD/LibraryD.nuspec:B":
            - 'LibraryD/**'

    - name: Order Dependencies
      id: order
      run: |
        python3 - << 'EOF'
        import json
        import sys
        import os
        from collections import defaultdict

        def create_graph(items):
            graph = defaultdict(list)
            nodes = set()
            
            # Parse the items and build the graph
            for item in items:
                parts = item.strip('"').split(':')
                key = parts[0]
                deps = parts[2].split('+') if parts[2] else []
                nodes.add(key)
                for dep in deps:
                    if dep:
                        graph[key].append(dep)
                        nodes.add(dep)
            return graph, nodes

        def topological_sort(graph, nodes):
            # Track visited nodes and detect cycles
            visited = set()
            temp = set()
            order = []
            
            def visit(node):
                if node in temp:
                    sys.exit(f"Error: Circular dependency detected involving {node}")
                if node not in visited:
                    temp.add(node)
                    for dep in graph[node]:
                        visit(dep)
                    temp.remove(node)
                    visited.add(node)
                    order.append(node)
            
            # Visit each node
            for node in nodes:
                if node not in visited:
                    visit(node)
            
            return order

        # Get the changes from GitHub Actions environment
        changes = '${{ steps.filter.outputs.changes }}'
        if changes == '[]':
            with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                f.write('ordered_changes=[]')
            sys.exit(0)

        # Remove brackets and split into items
        items = [item.strip() for item in changes.strip('[]').split(',')]
        
        # Create dependency graph
        graph, nodes = create_graph(items)
        
        # Get topological order
        ordered_keys = topological_sort(graph, nodes)
        
        # Filter and reorder the original items based on the topological order
        ordered_items = []
        key_to_item = {item.strip('"').split(':')[0]: item for item in items}
        for key in ordered_keys:
            if key in key_to_item:
                ordered_items.append(key_to_item[key])
        
        # Output the ordered array using environment file
        with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            f.write(f'ordered_changes=[{",".join(ordered_items)}]')
        EOF

    - name: Update Versions
      id: versions
      run: |
        python3 - << 'EOF'
        import xml.etree.ElementTree as ET
        import re
        import subprocess
        import sys
        import os

        def get_commit_messages():
            result = subprocess.run(['git', 'log', '--format=%B'], capture_output=True, text=True)
            return result.stdout

        def parse_version(version_str):
            match = re.match(r'(\d+)\.(\d+)\.(\d+)', version_str)
            if not match:
                return (0, 0, 0)
            return tuple(map(int, match.groups()))

        def get_version_from_file(file_path):
            if file_path.endswith('.csproj'):
                tree = ET.parse(file_path)
                version_elem = tree.find(".//Version")
                return version_elem.text if version_elem is not None else "1.0.0"
            elif file_path.endswith('.nuspec'):
                tree = ET.parse(file_path)
                ns = {'ns': 'http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd'}
                version_elem = tree.find(".//ns:version", ns)
                return version_elem.text if version_elem is not None else "1.0.0"
            return "1.0.0"

        def update_version_in_file(file_path, new_version):
            if file_path.endswith('.csproj'):
                tree = ET.parse(file_path)
                version_elem = tree.find(".//Version")
                if version_elem is not None:
                    version_elem.text = new_version
                tree.write(file_path, encoding='utf-8', xml_declaration=True)
            elif file_path.endswith('.nuspec'):
                tree = ET.parse(file_path)
                ns = {'ns': 'http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd'}
                version_elem = tree.find(".//ns:version", ns)
                if version_elem is not None:
                    version_elem.text = new_version
                tree.write(file_path, encoding='utf-8', xml_declaration=True)

        def calculate_new_version(current_version, key):
            major, minor, patch = parse_version(current_version)
            commit_messages = get_commit_messages()
            
            # Check for version change indicators in commit messages
            if f'[BREAKING_CHANGE:{key}]' in commit_messages:
                return f"{major + 1}.0.0"
            elif f'[NEW_FEATURE:{key}]' in commit_messages:
                return f"{major}.{minor + 1}.0"
            else:
                return f"{major}.{minor}.{patch + 1}"

        # Process the changes
        changes = '${{ steps.order.outputs.ordered_changes }}'
        if changes == '[]':
            sys.exit(0)

        # Remove brackets and split into items
        items = [item.strip() for item in changes.strip('[]').split(',')]
        
        version_changes = []
        for item in items:
            parts = item.strip('"').split(':')
            key = parts[0]
            file_path = parts[1]
            
            # Get current version
            current_version = get_version_from_file(file_path)
            
            # Calculate new version
            new_version = calculate_new_version(current_version, key)
            
            # Update version in file
            update_version_in_file(file_path, new_version)
            
            # Store the change for summary
            version_changes.append(f"{key}: {current_version} -> {new_version}")

        # Print summary
        print("Version changes summary:")
        for change in version_changes:
            print(change)
        
        # Write output to environment file
        with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            f.write(f'version_changes={";".join(version_changes)}')
        EOF

    - name: Print Changed Libraries
      run: |
        changes="${{ steps.order.outputs.ordered_changes }}"
        if [ "$changes" = "[]" ]; then
          echo "No libraries were changed"
        else
          # Remove outer brackets and quotes
          filtered_changes=$(echo "$changes" | sed 's/^\[\|\]$//g' | sed 's/"//g')
          
          # Process each item
          echo "$filtered_changes" | tr ',' '\n' | while read -r item; do
            # Trim leading/trailing whitespace
            item=$(echo "$item" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
            if [ ! -z "$item" ]; then
              # Extract each part using exact positions
              key=$(echo "$item" | cut -d':' -f1)
              path=$(echo "$item" | cut -d':' -f2)
              deps=$(echo "$item" | cut -d':' -f3)
              # Extract file extension without the dot
              ext=$(echo "$path" | grep -o '\.[^.]*$' | sed 's/\.//' || echo "no extension")
              # Only output if we have a valid key
              if [ ! -z "$key" ]; then
                echo "Library changed: $key (path: $path, dependencies: ${deps:-none})"
                echo "File extension: $ext"
                echo ""
              fi
            fi
          done
        fi  