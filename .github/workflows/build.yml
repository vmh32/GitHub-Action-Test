name: Build and Package

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  detect-and-build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Detect Changed Packages
      id: filter
      uses: dorny/paths-filter@v3
      with:
        filters: |
          "A:LibraryA/LibraryA.csproj:B,C":
            - 'LibraryA/**'
          "B:LibraryB/LibraryB.csproj:C":
            - 'LibraryB/**'
          "C:LibraryC/LibraryC.csproj:":
            - 'LibraryC/**'

    - name: Print Changed Libraries
      run: |
        changes="${{ steps.filter.outputs.changes }}"
        if [ "$changes" = "[]" ]; then
          echo "No libraries were changed"
        else
          # Remove outer brackets and quotes
          filtered_changes=$(echo "$changes" | sed 's/^\[\|\]$//g' | sed 's/"//g')
          
          # Create a temporary file to store processed items
          temp_file=$(mktemp)
          
          # Process each item and store in temp file
          echo "$filtered_changes" | tr ',' '\n' | while read -r item; do
            # Trim leading/trailing whitespace
            item=$(echo "$item" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
            if [ ! -z "$item" ]; then
              # Split the item into parts
              key=$(echo "$item" | cut -d':' -f1)
              path=$(echo "$item" | cut -d':' -f2)
              deps=$(echo "$item" | cut -d':' -f3)
              echo "$key|$path|${deps:-none}" >> "$temp_file"
            fi
          done
          
          # Sort and remove duplicates, then display
          sort -u "$temp_file" | while IFS='|' read -r key path deps; do
            echo "Library changed: $key (path: $path, dependencies: $deps)"
          done
          
          # Clean up
          rm -f "$temp_file"
        fi 